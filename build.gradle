apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'checkstyle'
apply plugin: 'project-report'
apply plugin: 'distribution'
apply plugin: 'build-dashboard'

defaultTasks 'build', 'htmlDependencyReport', 'jacocoTestReport'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
group = 'de.tauber'
archivesBaseName = 'gradi'
version = '0.1.0'
println project.name

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

ext {
    cdiVersion = '1.2'
    deltaspikeVersion = '1.3.0'
    owbVersion = '1.2.7'
    weldVersion = '2.2.10.Final'
    junitVersion = '4.12'
    assertjVersion = '2.0.0'
    mockitoVersion = '1.10.19'
    slf4jVersion = '1.7.12'
    logbackVersion = '1.1.3'
}

repositories {
    mavenCentral()
}

dependencies {
    //CDI API
    compile group: 'javax.enterprise', name: 'cdi-api', version: cdiVersion
	
	//Logging with slf4j
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
	
    //Apache Deltaspike CdiCtrl
    testCompile group: 'org.apache.deltaspike.modules', name: 'deltaspike-test-control-module-api', version: deltaspikeVersion
    testRuntime group: 'org.apache.deltaspike.modules', name: 'deltaspike-test-control-module-impl', version: deltaspikeVersion
    
    //Apache OpenWebbeans CDI Container
    testRuntime group: 'org.apache.deltaspike.cdictrl', name: 'deltaspike-cdictrl-owb', version: deltaspikeVersion
    testRuntime group: 'org.apache.openwebbeans', name: 'openwebbeans-spi', version: owbVersion
    testRuntime group: 'org.apache.openwebbeans', name: 'openwebbeans-impl', version: owbVersion
    
    //JBoss Weld CDI Container
    //testCompile group: 'org.apache.deltaspike.cdictrl', name: 'deltaspike-cdictrl-weld', version: deltaspikeVersion
    //testCompile group: 'org.jboss.weld.se', name: 'weld-se', version: weldVersion
    
    //Unit testing
    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.assertj', name: 'assertj-core', version: assertjVersion     
    testCompile group: 'org.mockito', name: 'mockito-all', version: mockitoVersion
}

	
test.doFirst {
    println 'Copy the CDI beans.xml'
    copy {
        from 'build/resources/main/META-INF/beans.xml'
        into 'build/classes/main/META-INF/'
    }
}

task pom << {
    pom {
        project {
            inceptionYear '2014'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo('pom.xml')
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugs {
    //toolVersion = '2.0.1'
    //sourceSets = [sourceSets.main]
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = 'max'
    reportLevel = 'high'
    //visitors = ['FindSqlInjection', 'SwitchFallthrough']
    //omitVisitors = ['FindNonShortCircuit']
    //includeFilter = file("$project.projectDir/config/findbugs/includeFilter.xml")
    //excludeFilter = file("$project.projectDir/config/findbugs/excludeFilter.xml")
}

tasks.withType(Pmd) {
    reports {
    	xml.enabled = true
    	html.enabled = true

    }
}

pmd {
    ignoreFailures = true
    //sourceSets = [sourceSets.main]
    //ruleSetFiles = file("$project.projectDir/config/pmd/rules.xml")
    //ruleSets = ['basic','braces']
    reportsDir = file("$project.buildDir/reports/pmd")	
}

tasks.withType(JDepend) {
    reports {
        text.enabled = false
        xml.enabled = true
        
    }
}

jdepend {
    //sourceSets = [sourceSets.main]
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/jdepend")
}

checkstyle {
    configFile = file("$project.projectDir/config/checkstyle.xml")
    ignoreFailures = true
}

test {
    jacoco {
        append = false
        destinationFile = file("$project.buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$project.buildDir/jacoco/classpathdumps")
    }    
}

jacoco {
	reportsDir = file("$project.buildDir/reports/jacoco")
}

jacocoTestReport {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'
    reports {
        xml{
            enabled true
            //destination "${project.buildDir}/reports/jacoco/jacoco.xml"
        }
        csv.enabled false
        html{
            enabled true
            //destination "${project.buildDir}/reports/jacoco"
        }
    }
}

htmlDependencyReport {
	projects = project.allprojects
}
