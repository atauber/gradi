plugins {
    id 'java'
    id 'maven'
    id 'eclipse'
    id 'jacoco'
    id 'pmd'
    id 'checkstyle'
    id 'project-report'
    id 'distribution'
    id 'build-dashboard'
    id 'com.github.spotbugs' version '2.0.0'
}

defaultTasks 'build', 'htmlDependencyReport', 'jacocoTestReport'

sourceCompatibility = 11
targetCompatibility = 11

println("group: " + group + ", project.name: " + project.name + ", version: " + version)
println("description: " + description)

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//extra properties
ext {
}

repositories {
    mavenCentral()
}

configurations {
    weldTestRuntime{
        description 'Provides weld runtime to tests'
    }
    owbTestRuntime{
        description 'Provides owb runtime to tests'
    }
    testRuntime {
        description 'Customized runtime for unit tests'
        extendsFrom testCompile, owbTestRuntime
        //extendsFrom testCompile, weldTestRuntime
    }
}

dependencies {
    //CDI API
    compile group: 'javax.enterprise', name: 'cdi-api', version: cdiVersion
    
    //Bean Validation
    compile group: 'javax.validation', name: 'validation-api', version: beanValidationVersion
    testRuntime group: 'org.apache.bval', name: 'org.apache.bval.bundle', version: bvalVersion 
    testRuntime group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version
    
    //Logging with slf4j
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    testRuntime group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
	
    //Unit testing
    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.assertj', name: 'assertj-core', version: assertjVersion     
    testCompile group: 'org.mockito', name: 'mockito-all', version: mockitoVersion
    
    //Apache Deltaspike CdiCtrl
    testCompile group: 'org.apache.deltaspike.modules', name: 'deltaspike-test-control-module-api', version: deltaspikeVersion
    testRuntime group: 'org.apache.deltaspike.modules', name: 'deltaspike-test-control-module-impl', version: deltaspikeVersion
    testRuntime group: 'org.apache.deltaspike.core', name: 'deltaspike-core-impl', version: deltaspikeVersion

    //Apache OpenWebbeans CDI Container
    owbTestRuntime group: 'org.apache.deltaspike.cdictrl', name: 'deltaspike-cdictrl-owb', version: deltaspikeVersion
    owbTestRuntime group: 'org.apache.openwebbeans', name: 'openwebbeans-spi', version: owbVersion
    owbTestRuntime group: 'org.apache.openwebbeans', name: 'openwebbeans-impl', version: owbVersion
    
    //Annotations Api needed with Apache OpenWebBeans 1.5.0
    owbTestRuntime group: 'javax.annotation', name: 'javax.annotation-api', version: annotationsVersion
    
    //JBoss Weld CDI Container
    weldTestRuntime group: 'org.apache.deltaspike.cdictrl', name: 'deltaspike-cdictrl-weld', version: deltaspikeVersion
    weldTestRuntime group: 'org.jboss.weld.se', name: 'weld-se-shaded', version: weldVersion
    
    //MyFaces + Servlet API needed for clean test run with weld
    weldTestRuntime group: 'org.apache.myfaces.core', name: 'myfaces-impl-test', version: myfacesVersion
    weldTestRuntime group: 'org.apache.myfaces.core', name: 'myfaces-impl', version: myfacesVersion
    weldTestRuntime group: 'org.apache.myfaces.test', name: 'myfaces-test22', version: myfacesTest22Version
    weldTestRuntime group: 'javax.servlet', name: 'javax.servlet-api', version: servletApiVersion


}


//Standard project layout
sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }	
}

//Run tests if project has property runTests
test.onlyIf { project.hasProperty('runTests') }

//Enable/Disable unit tests in build 
test.enabled = true

//Configure unit tests
test
{
    //Copy the CDI beans.xml before executing unit tests
    doFirst {
        copy {
            from 'build/resources/main/META-INF/beans.xml'
            into 'build/classes/main/META-INF/'
        }
    }
    //Filter the unit tests to run
    filter {
        includeTestsMatching "de.tauber.*"
    }
    //Include/exclude test categories
    useJUnit {
    	includeCategories 'de.tauber.gradi.categories.UnitTests', \
            'de.tauber.gradi.categories.IntegrationTests'
    	excludeCategories 'de.tauber.gradi.categories.SmokeTests'
    }
}

//Include a javadoc zip
task javadocZip(type: Zip, dependsOn: javadoc) {
    description 'Generate a javadoc zip file'
    group = 'Documentation'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocZip
}

//Generate a Maven pom for project
task pom  {
    description 'Generates a Maven pom for project'
    group 'Distribution'
    doLast{
        pom {
            project {
                inceptionYear '2014'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo('pom.xml')
    }
}

//Build a dashboard?
buildDashboard.onlyIf { project.hasProperty('runChecks') }

//Checkstyle configuration
checkstyleMain.onlyIf { project.hasProperty('runChecks') }
checkstyleTest.onlyIf { project.hasProperty('runChecks') }

checkstyle {
    ignoreFailures = true
    showViolations = false
    //sourceSets = [sourceSets.main, sourceSets.test]        
    configFile = file("$project.projectDir/config/checkstyle/checkstyle.xml")
}

//Task to create html pages for checkstyle reports
task checkstyleHtml(dependsOn: ['checkstyleMain', 'checkstyleTest']) {
    description = 'Generates Checkstyle html reports'
    group = 'Verification'
    doLast{
        ant.xslt(in: checkstyleMain.reports.xml.destination,
            style: file("$project.projectDir/config/checkstyle/checkstyle-noframes-sorted.xsl"),
            out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
        ant.xslt(in: checkstyleTest.reports.xml.destination,
            style: file("$project.projectDir/config/checkstyle/checkstyle-noframes-sorted.xsl"),
            out: new File(checkstyleTest.reports.xml.destination.parent, 'test.html'))
    }
}

//PMD Configuration
pmdMain.onlyIf { project.hasProperty('runChecks') }
pmdTest.onlyIf { project.hasProperty('runChecks') }

tasks.withType(Pmd) {
    reports {
        html {
            enabled true
        }
        xml {
            enabled true
        }
    }
}

pmd {
    ignoreFailures = true
    sourceSets = [sourceSets.main,sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("$project.projectDir/config/pmd/java/errorprone.xml","$project.projectDir/config/pmd/java/security.xml")
    ruleSets = []
}

//spotbugsMain.onlyIf { project.hasProperty('runChecks') }


task spotbugs (type: com.github.spotbugs.SpotBugsTask) {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'high'
    spotbugsTest.enabled = false
    reports {
        xml.enabled = true
    }
}



//Jacoco Configuration
//Generate Java Code Coverage artefacts with tests1
test {
    jacoco {
        destinationFile = file("$project.buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$project.buildDir/jacoco/classpathdumps")
    }    
}

jacoco {
    reportsDir = file("$project.buildDir/reports/jacoco")
}

jacocoTestReport {
    description = 'Generate Jacoco coverage reports after running tests.'
    group = 'Reporting'
    reports {
        xml{
            enabled true
            //destination "${project.buildDir}/reports/jacoco/jacoco.xml"
        }
        csv.enabled false
        html{
            enabled true
            //destination "${project.buildDir}/reports/jacoco"
        }
    }
    //sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    //classDirectories = files(sourceSets.main.output.classesDir)

    //additionalSourceDirs = files(['test/java', 'src/java-test'])
    //additionalClassDirs = files(['build/jacoco/UT/classpathdumps/com/abc/xyz', 'build/jacoco/IT/classpathdumps/com/abc/xyz'])
    
    //sourceDirectories = files('src/main/java')
    //classDirectories = files('build/classes/main')

    //sourceDirectories = fileTree('src/main/java')
    //classDirectories = fileTree('build/classes/main')    
}

task listTasks {
    doLast {
        description = 'List available gradle Tasks'
        group = 'Information'
        tasks.each { task -> println(task.name + ": " + task.description)}
    }
}

//Tasks providing project information
task listConfigurations  {
    doLast {
        description = 'List available gradle Configurations'
        group = 'Information'
        configurations.each { conf -> println conf.name }
    
    } 
}

//Tasks providing project information
task listSourceSets {
    doLast {
        description = 'List available gradle SourceSets'
        group = 'Information'
        sourceSets.each { ss -> println ss.name }
    } 
}

task listDependencies {
    doLast {
        description = 'List all dependencies for testRuntime configuration'
        group = 'Information'
        configurations.testRuntime.allDependencies.each {
            dep -> println("" + dep.group + ":" + dep.name + ":" + dep.version)
        }
    }
}

task listFilenames {
    doLast {
        description = 'List filename of jars used by testRuntime'
        group = 'Information'
        configurations.testRuntime.files.each { file -> println file.name }
    }
}
