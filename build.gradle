plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'eclipse'
    id 'jacoco'
    id 'pmd'
    id 'checkstyle'
    id 'project-report'
    id 'distribution'
    id 'build-dashboard'
    id 'com.github.spotbugs-base' version '5.2.1'
}

application {
    mainClass = 'de.tauber.gradi.Main'
}

defaultTasks 'build', 'htmlDependencyReport', 'jacocoTestReport'

java {
    //OWB 4.0.0 does not support Java 21
    sourceCompatibility = 20
    targetCompatibility = 20
}

println("group: " + group + ", project.name: " + project.name + ", version: " + version)
println("description: " + description)

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//extra properties
ext {
}

repositories {
    mavenCentral()
    maven {
        url 'https://repository.apache.org/content/groups/snapshots'
    }
}

configurations {
    owbTestRuntime {
        description 'Provides owb runtime to tests'
    }
    testRuntimeOnly {
        description 'Customized runtime for unit tests'
        extendsFrom testImplementation, owbTestRuntime
        //extendsFrom testCompile, weldTestRuntime
    }
}

dependencies {
    //CDI API
    implementation group: 'jakarta.enterprise', name: 'jakarta.enterprise.cdi-api', version: cdiVersion
    implementation group: 'org.apache.openwebbeans', name: 'openwebbeans-se', version: owbVersion

    //Bean Validation
    implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: beanValidationVersion
    testRuntimeOnly group: 'org.apache.bval', name: 'org.apache.bval.bundle', version: bvalVersion
    testRuntimeOnly group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version

    //Logging with slf4j
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion

    //Unit testing
    testImplementation group: 'junit', name: 'junit', version: junitVersion
    testImplementation group: 'org.assertj', name: 'assertj-core', version: assertjVersion
    testImplementation group: 'org.mockito', name: 'mockito-all', version: mockitoVersion

    //Apache Deltaspike CdiCtrl
    testImplementation group: 'org.apache.deltaspike.modules', name: 'deltaspike-test-control-module-api', version: deltaspikeVersion
    testRuntimeOnly group: 'org.apache.deltaspike.modules', name: 'deltaspike-test-control-module-impl', version: deltaspikeVersion
    testRuntimeOnly group: 'org.apache.deltaspike.core', name: 'deltaspike-core-impl', version: deltaspikeVersion

    //Apache OpenWebbeans CDI Container
    owbTestRuntime group: 'org.apache.deltaspike.cdictrl', name: 'deltaspike-cdictrl-owb', version: deltaspikeVersion
    owbTestRuntime group: 'org.apache.openwebbeans', name: 'openwebbeans-spi', version: owbVersion
    owbTestRuntime group: 'org.apache.openwebbeans', name: 'openwebbeans-impl', version: owbVersion

    //Annotations Api needed with Apache OpenWebBeans 1.5.0
    owbTestRuntime group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: annotationsVersion

}


//Standard project layout
sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

//Run tests if project has property runTests
test.onlyIf { project.hasProperty('runTests') }

//Enable/Disable unit tests in build
test.enabled = true

//Configure unit tests
test
        {
            //Copy the CDI beans.xml before executing unit tests
            doFirst {
                copy {
                    from 'build/resources/main/META-INF/beans.xml'
                    into 'build/classes/main/META-INF/'
                }
            }
            //Filter the unit tests to run
            filter {
                includeTestsMatching "de.tauber.*"
            }
            //Include/exclude test categories
            useJUnit {
                includeCategories 'de.tauber.gradi.categories.UnitTests',   \
              'de.tauber.gradi.categories.IntegrationTests'
                excludeCategories 'de.tauber.gradi.categories.SmokeTests'
            }
            jvmArgs "--add-opens=java.base/java.lang=ALL-UNNAMED"
        }

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

//Include a javadoc zip
tasks.register('javadocZip', Zip) {
    dependsOn javadoc
    description 'Generate a javadoc zip file'
    group = 'Documentation'
    from javadoc.destinationDir
}

artifacts {
    archives javadocZip
}

//Generate a Maven pom for project
tasks.register('pom') {
    description 'Generates a Maven pom for project'
    group 'Distribution'
    doLast {
        pom {
            inceptionYear '2014'
            licenses {
                license {
                    name = "The Apache Software License, Version 2.0"
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }.writeTo('pom.xml')
    }
}

//Build a dashboard?
buildDashboard.onlyIf { project.hasProperty('runChecks') }

//Checkstyle configuration
checkstyleMain.onlyIf { project.hasProperty('runChecks') }
checkstyleTest.onlyIf { project.hasProperty('runChecks') }

checkstyle {
    ignoreFailures = true
    showViolations = false
    //sourceSets = [sourceSets.main, sourceSets.test]
    configFile = file("$project.projectDir/config/checkstyle/checkstyle.xml")
}

//Task to create html pages for checkstyle reports
tasks.register('checkstyleHtml') {
    dependsOn = ['checkstyleMain', 'checkstyleTest']
    description = 'Generates Checkstyle html reports'
    group = 'Verification'
    doLast {
        ant.xslt(in: checkstyleMain.reports.xml.destination,
                style: file("$project.projectDir/config/checkstyle/checkstyle-noframes-sorted.xsl"),
                out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
        ant.xslt(in: checkstyleTest.reports.xml.destination,
                style: file("$project.projectDir/config/checkstyle/checkstyle-noframes-sorted.xsl"),
                out: new File(checkstyleTest.reports.xml.destination.parent, 'test.html'))
    }
}

//PMD Configuration
pmdMain.onlyIf { project.hasProperty('runChecks') }
pmdTest.onlyIf { project.hasProperty('runChecks') }

tasks.withType(Pmd).configureEach {
    reports {
        html.required = true
        xml.required = true
    }
}

pmd {
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("$project.projectDir/config/pmd/java/errorprone.xml", "$project.projectDir/config/pmd/java/security.xml")
    ruleSets = []
}


jacoco {
    reportsDirectory = layout.buildDirectory.dir('jacocoReports')
}

jacocoTestReport {
    reports {
        html.required = true
    }
}

if (project.hasProperty('runChecks')) {
    spotbugs {
        ignoreFailures = true
        effort = 'max'
        reportLevel = 'high'
    }
}


tasks.register('listTasks') {
    doLast {
        description = 'List available gradle Tasks'
        group = 'Information'
        tasks.each { task -> println(task.name + ": " + task.description) }
    }
}

//Tasks providing project information
tasks.register('listConfigurations') {
    doLast {
        description = 'List available gradle Configurations'
        group = 'Information'
        configurations.each { conf -> println conf.name }

    }
}

//Tasks providing project information
tasks.register('listSourceSets') {
    doLast {
        description = 'List available gradle SourceSets'
        group = 'Information'
        sourceSets.each { ss -> println ss.name }
    }
}

tasks.register('listDependencies') {
    doLast {
        description = 'List all dependencies for testRuntime configuration'
        group = 'Information'
        configurations.testRuntime.allDependencies.each {
            dep -> println("" + dep.group + ":" + dep.name + ":" + dep.version)
        }
    }
}

tasks.register('listFilenames') {
    doLast {
        description = 'List filename of jars used by testRuntime'
        group = 'Information'
        configurations.testRuntime.files.each { file -> println file.name }
    }
}
